// Generated by Haxe 4.2.1

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace dropecho.ai.fsm {
	public class Transition {
		
		public Transition(global::dropecho.ai.fsm.IState to, global::System.Func<bool> condition) {
			this.to = to;
			this.condition = condition;
		}
		
		
		public global::dropecho.ai.fsm.IState to;
		
		public global::System.Func<bool> condition;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace dropecho.ai.fsm {
	public class FSM : global::haxe.lang.HxObject {
		
		public FSM(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public FSM() {
			global::dropecho.ai.fsm.FSM.__hx_ctor_dropecho_ai_fsm_FSM(this);
		}
		
		
		protected static void __hx_ctor_dropecho_ai_fsm_FSM(global::dropecho.ai.fsm.FSM __hx_this) {
			__hx_this._anyTransitions = new global::haxe.root.Array<object>();
			__hx_this._transitions = global::dropecho.interop._AbstractMap.AbstractMap_Impl_._new<string, global::haxe.root.Array<object>>(default(global::System.Collections.Generic.IDictionary<string, global::haxe.root.Array<object>>));
			{
			}
			
		}
		
		
		public global::dropecho.ai.fsm.IState _currentState;
		
		public global::System.Collections.Generic.IDictionary<string, global::haxe.root.Array<object>> _transitions;
		
		public global::haxe.root.Array<object> _anyTransitions;
		
		public virtual void tick() {
			global::dropecho.ai.fsm.Transition transition = this.getTransition();
			if (( transition != null )) {
				this.changeToState(transition.to);
			}
			
			if (( this._currentState != null )) {
				this._currentState.tick();
			}
			
		}
		
		
		public virtual void changeToState(global::dropecho.ai.fsm.IState state) {
			if (( state == this._currentState )) {
				return;
			}
			
			if (( this._currentState != null )) {
				this._currentState.onExit();
			}
			
			this._currentState = state;
			this._currentState.onEnter();
		}
		
		
		public virtual void addTransition(global::dropecho.ai.fsm.IState @from, global::dropecho.ai.fsm.IState to, global::System.Func<bool> condition) {
			global::dropecho.ai.fsm.Transition t = new global::dropecho.ai.fsm.Transition(to, condition);
			global::System.Collections.Generic.IDictionary<string, global::haxe.root.Array<object>> this1 = this._transitions;
			string key = @from.getName();
			if ( ! (this1.ContainsKey(((string) (key) ))) ) {
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("No key ", global::haxe.root.Std.@string(key)), " found in dictionary, try using .exists(key) to check first."))) );
			}
			
			global::haxe.root.Array<object> transitions = this1[((string) (key) )];
			if (( transitions == null )) {
				transitions = new global::haxe.root.Array<object>();
				((global::System.Collections.Generic.IDictionary<string, global::haxe.root.Array<object>>) (this._transitions) )[((string) (@from.getName()) )] = ((global::haxe.root.Array<object>) (transitions) );
			}
			
			transitions.push(t);
		}
		
		
		public virtual void addAnyTransition(global::dropecho.ai.fsm.IState to, global::System.Func<bool> condition) {
			this._anyTransitions.push(new global::dropecho.ai.fsm.Transition(to, condition));
		}
		
		
		public virtual global::dropecho.ai.fsm.Transition getTransition() {
			{
				int _g = 0;
				global::haxe.root.Array<object> _g1 = this._anyTransitions;
				while (( _g < _g1.length )) {
					global::dropecho.ai.fsm.Transition t = ((global::dropecho.ai.fsm.Transition) (_g1[_g]) );
					 ++ _g;
					global::System.Func<bool> this1 = t.condition;
					if (this1()) {
						return t;
					}
					
				}
				
			}
			
			global::System.Collections.Generic.IDictionary<string, global::haxe.root.Array<object>> this2 = this._transitions;
			string key = this._currentState.getName();
			if ( ! (this2.ContainsKey(((string) (key) ))) ) {
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("No key ", global::haxe.root.Std.@string(key)), " found in dictionary, try using .exists(key) to check first."))) );
			}
			
			global::haxe.root.Array<object> _currentTransitions = this2[((string) (key) )];
			if (( _currentTransitions != null )) {
				int _g2 = 0;
				while (( _g2 < _currentTransitions.length )) {
					global::dropecho.ai.fsm.Transition t1 = ((global::dropecho.ai.fsm.Transition) (_currentTransitions[_g2]) );
					 ++ _g2;
					global::System.Func<bool> this3 = t1.condition;
					if (this3()) {
						return t1;
					}
					
				}
				
			}
			
			return null;
		}
		
		
		public virtual string toDot() {
			global::dropecho.interop.CSDictKeyIterator<string, global::haxe.root.Array<object>> nodes = new global::dropecho.interop.CSDictKeyIterator<string, global::haxe.root.Array<object>>(((global::System.Collections.Generic.IDictionary<string, global::haxe.root.Array<object>>) (this._transitions) ));
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("\n      digraph {\n        ", global::haxe.root.Std.@string(nodes)), "\n\n        a -> b \n      }\n    ");
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1046252113:
					{
						this._anyTransitions = ((global::haxe.root.Array<object>) (global::haxe.root.Array<object>.__hx_cast<object>(((global::haxe.root.Array) (@value) ))) );
						return @value;
					}
					
					
					case 653656895:
					{
						this._transitions = ((global::System.Collections.Generic.IDictionary<string, global::haxe.root.Array<object>>) (@value) );
						return @value;
					}
					
					
					case 763751927:
					{
						this._currentState = ((global::dropecho.ai.fsm.IState) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 336458702:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toDot", 336458702)) );
					}
					
					
					case 891414987:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getTransition", 891414987)) );
					}
					
					
					case 1709230272:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addAnyTransition", 1709230272)) );
					}
					
					
					case 1123604246:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addTransition", 1123604246)) );
					}
					
					
					case 828663558:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "changeToState", 828663558)) );
					}
					
					
					case 1291633501:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "tick", 1291633501)) );
					}
					
					
					case 1046252113:
					{
						return this._anyTransitions;
					}
					
					
					case 653656895:
					{
						return this._transitions;
					}
					
					
					case 763751927:
					{
						return this._currentState;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 336458702:
					{
						return this.toDot();
					}
					
					
					case 891414987:
					{
						return this.getTransition();
					}
					
					
					case 1709230272:
					{
						this.addAnyTransition(((global::dropecho.ai.fsm.IState) (dynargs[0]) ), ((global::System.Func<bool>) (dynargs[1]) ));
						break;
					}
					
					
					case 1123604246:
					{
						this.addTransition(((global::dropecho.ai.fsm.IState) (dynargs[0]) ), ((global::dropecho.ai.fsm.IState) (dynargs[1]) ), ((global::System.Func<bool>) (dynargs[2]) ));
						break;
					}
					
					
					case 828663558:
					{
						this.changeToState(((global::dropecho.ai.fsm.IState) (dynargs[0]) ));
						break;
					}
					
					
					case 1291633501:
					{
						this.tick();
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array<string> baseArr) {
			baseArr.push("_anyTransitions");
			baseArr.push("_transitions");
			baseArr.push("_currentState");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


